!function t(n,e,r){function o(u,c){if(!e[u]){if(!n[u]){var f="function"==typeof require&&require;if(!c&&f)return f(u,!0);if(i)return i(u,!0);throw new Error("Cannot find module '"+u+"'")}var s=e[u]={exports:{}};n[u][0].call(s.exports,function(t){var e=n[u][1][t];return o(e?e:t)},s,s.exports,t,n,e,r)}return e[u].exports}for(var i="function"==typeof require&&require,u=0;u<r.length;u++)o(r[u]);return o}({1:[function(t,n){/*
Rygr Async Queue, v 0.0.1
Copyright (c)2014 Patrick Camacho
Distributed under MIT license
https://github.com/camacho/rygr.async-queue
 */
(function(){var e;e=t("q"),n.exports=function(){var t,n,r,o,i,u,c,f,s,a,p;if(s=[],c=Array.isArray||function(t){return"[object Array]"===Object.prototype.toString.call(t)},f=function(t){return"function"==typeof t},i=e.defer(),c(t)||(t=[t]),n=t.length+1,!c(o)){if(!f(o))throw new Error("Callbacks must be an array of functions");o=[o]}for(a=0,p=o.length;p>a;a++){if(r=o[a],!f(r))throw new Error("Callback is not a function");s.push({handle:r})}return u=function(){var r,o;return r=0,(o=function(u){var c,f,a;if(e.isPending(i.promise)){if(a=s[r++],!a)return u?i.reject(u):i.resolve(),void("function"==typeof done&&done(u));try{return c=a.handle.length,u?c===n+1?a.handle.apply(void 0,[u].concat(t,[o])):o(u):n+1>c?a.handle.apply(void 0,t.concat([o])):o()}catch(p){return f=p,o(f)}}})()},u(),i.promise}}).call(this)},{q:3}],2:[function(t,n){function e(){}// shim for using process in browser
var r=n.exports={};r.nextTick=function(){var t="undefined"!=typeof window&&window.setImmediate,n="undefined"!=typeof window&&window.postMessage&&window.addEventListener;if(t)return function(t){return window.setImmediate(t)};if(n){var e=[];return window.addEventListener("message",function(t){var n=t.source;if((n===window||null===n)&&"process-tick"===t.data&&(t.stopPropagation(),e.length>0)){var r=e.shift();r()}},!0),function(t){e.push(t),window.postMessage("process-tick","*")}}return function(t){setTimeout(t,0)}}(),r.title="browser",r.browser=!0,r.env={},r.argv=[],r.on=e,r.addListener=e,r.once=e,r.off=e,r.removeListener=e,r.removeAllListeners=e,r.emit=e,r.binding=function(){throw new Error("process.binding is not supported")},// TODO(shtylman)
r.cwd=function(){return"/"},r.chdir=function(){throw new Error("process.chdir is not supported")}},{}],3:[function(t,n,e){(function(t){// vim:ts=4:sts=4:sw=4:
/*!
 *
 * Copyright 2009-2012 Kris Kowal under the terms of the MIT
 * license found at http://github.com/kriskowal/q/raw/master/LICENSE
 *
 * With parts by Tyler Close
 * Copyright 2007-2009 Tyler Close under the terms of the MIT X license found
 * at http://www.opensource.org/licenses/mit-license.html
 * Forked at ref_send.js version: 2009-05-11
 *
 * With parts by Mark Miller
 * Copyright (C) 2011 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
!function(t){"use strict";// This file will function properly as a <script> tag, or a module
// using CommonJS and NodeJS or RequireJS module formats.  In
// Common/Node/RequireJS, the module exports the Q API and when
// executed as a simple <script>, it creates a Q global instead.
// Montage Require
if("function"==typeof bootstrap)bootstrap("promise",t);else if("object"==typeof e&&"object"==typeof n)n.exports=t();else if("function"==typeof define&&define.amd)define(t);else if("undefined"!=typeof ses){if(!ses.ok())return;ses.makeQ=t}else{if("undefined"==typeof self)throw new Error("This environment was not anticiapted by Q. Please file a bug.");self.Q=t()}}(function(){"use strict";function n(t){return function(){return H.apply(t,arguments)}}function e(t){return t===Object(t)}// generator related shims
// FIXME: Remove this function once ES6 generators are in SpiderMonkey.
function r(t){return"[object StopIteration]"===en(t)||t instanceof X}function o(t,n){// If possible, transform the error stack trace by removing Node and Q
// cruft, then concatenating with the stack trace of `promise`. See #57.
if(B&&n.stack&&"object"==typeof t&&null!==t&&t.stack&&-1===t.stack.indexOf(rn)){for(var e=[],r=n;r;r=r.source)r.stack&&e.unshift(r.stack);e.unshift(t.stack);var o=e.join("\n"+rn+"\n");t.stack=i(o)}}function i(t){for(var n=t.split("\n"),e=[],r=0;r<n.length;++r){var o=n[r];f(o)||u(o)||!o||e.push(o)}return e.join("\n")}function u(t){return-1!==t.indexOf("(module.js:")||-1!==t.indexOf("(node.js:")}function c(t){// Named functions: "at functionName (filename:lineNumber:columnNumber)"
// In IE10 function name can have spaces ("Anonymous function") O_o
var n=/at .+ \((.+):(\d+):(?:\d+)\)$/.exec(t);if(n)return[n[1],Number(n[2])];// Anonymous functions: "at filename:lineNumber:columnNumber"
var e=/at ([^ ]+):(\d+):(?:\d+)$/.exec(t);if(e)return[e[1],Number(e[2])];// Firefox style: "function@filename:lineNumber or @filename:lineNumber"
var r=/.*@(.+):(\d+)$/.exec(t);return r?[r[1],Number(r[2])]:void 0}function f(t){var n=c(t);if(!n)return!1;var e=n[0],r=n[1];return e===V&&r>=G&&fn>=r}// discover own file name and line number range for filtering stack
// traces
function s(){if(B)try{throw new Error}catch(t){var n=t.stack.split("\n"),e=n[0].indexOf("@")>0?n[1]:n[2],r=c(e);if(!r)return;return V=r[0],r[1]}}function a(t,n,e){return function(){return"undefined"!=typeof console&&"function"==typeof console.warn&&console.warn(n+" is deprecated, use "+e+" instead.",new Error("").stack),t.apply(t,arguments)}}// end of shims
// beginning of real work
/**
 * Constructs a promise for an immediate reference, passes promises through, or
 * coerces promises from different systems.
 * @param value immediate reference or promise
 */
function p(t){// If the object is already a Promise, return it directly.  This enables
// the resolve function to both be used to created references from objects,
// but to tolerably coerce non-promises to promises.
// If the object is already a Promise, return it directly.  This enables
// the resolve function to both be used to created references from objects,
// but to tolerably coerce non-promises to promises.
// assimilate thenables
return t instanceof y?t:w(t)?S(t):O(t)}function l(){// NOTE: we do the checks for `resolvedPromise` in each method, instead of
// consolidating them into `become`, since otherwise we'd create new
// promises with the lines `become(whatever(value))`. See e.g. GH-252.
function t(t){n=t,i.source=t,K(e,function(n,e){p.nextTick(function(){t.promiseDispatch.apply(t,e)})},void 0),e=void 0,r=void 0}// if "messages" is an "Array", that indicates that the promise has not yet
// been resolved.  If it is "undefined", it has been resolved.  Each
// element of the messages array is itself an array of complete arguments to
// forward to the resolved promise.  We coerce the resolution value to a
// promise using the `resolve` function because it handles both fully
// non-thenable values and other thenables gracefully.
var n,e=[],r=[],o=Z(l.prototype),i=Z(y.prototype);if(i.promiseDispatch=function(t,o,i){var u=J(arguments);e?(e.push(u),"when"===o&&i[1]&&// progress operand
r.push(i[1])):p.nextTick(function(){n.promiseDispatch.apply(n,u)})},// XXX deprecated
i.valueOf=function(){if(e)return i;var t=m(n);return g(t)&&(n=t),t},i.inspect=function(){return n?n.inspect():{state:"pending"}},p.longStackSupport&&B)try{throw new Error}catch(u){// NOTE: don't try to use `Error.captureStackTrace` or transfer the
// accessor around; that causes memory leaks as per GH-111. Just
// reify the stack trace as a string ASAP.
//
// At the same time, cut off the first line; it's always just
// "[object Promise]\n", as per the `toString`.
i.stack=u.stack.substring(u.stack.indexOf("\n")+1)}return o.promise=i,o.resolve=function(e){n||t(p(e))},o.fulfill=function(e){n||t(O(e))},o.reject=function(e){n||t(E(e))},o.notify=function(t){n||K(r,function(n,e){p.nextTick(function(){e(t)})},void 0)},o}function d(t){if("function"!=typeof t)throw new TypeError("resolver must be a function.");var n=l();try{t(n.resolve,n.reject,n.notify)}catch(e){n.reject(e)}return n.promise}function h(t){return d(function(n,e){// Switch to this once we can assume at least ES5
// answerPs.forEach(function(answerP) {
//     Q(answerP).then(resolve, reject);
// });
// Use this in the meantime
for(var r=0,o=t.length;o>r;r++)p(t[r]).then(n,e)})}function y(t,n,e){void 0===n&&(n=function(t){return E(new Error("Promise does not support operation: "+t))}),void 0===e&&(e=function(){return{state:"unknown"}});var r=Z(y.prototype);// XXX deprecated `valueOf` and `exception` support
if(r.promiseDispatch=function(e,o,i){var u;try{u=t[o]?t[o].apply(r,i):n.call(r,o,i)}catch(c){u=E(c)}e&&e(u)},r.inspect=e,e){var o=e();"rejected"===o.state&&(r.exception=o.reason),r.valueOf=function(){var t=e();return"pending"===t.state||"rejected"===t.state?r:t.value}}return r}function v(t,n,e,r){return p(t).then(n,e,r)}function m(t){if(g(t)){var n=t.inspect();if("fulfilled"===n.state)return n.value}return t}function g(t){return t instanceof y}function w(t){return e(t)&&"function"==typeof t.then}function k(t){return g(t)&&"pending"===t.inspect().state}function j(t){return!g(t)||"fulfilled"===t.inspect().state}function b(t){return g(t)&&"rejected"===t.inspect().state}function x(){on.length=0,un.length=0,cn||(cn=!0)}function T(t,n){cn&&(un.push(t),on.push(n&&"undefined"!=typeof n.stack?n.stack:"(no stack) "+n))}function R(t){if(cn){var n=W(un,t);-1!==n&&(un.splice(n,1),on.splice(n,1))}}function E(t){var n=y({when:function(n){// note that the error has been handled
return n&&R(this),n?n(t):this}},function(){return this},function(){return{state:"rejected",reason:t}});// Note that the reason has not been handled.
return T(n,t),n}function O(t){return y({when:function(){return t},get:function(n){return t[n]},set:function(n,e){t[n]=e},"delete":function(n){delete t[n]},post:function(n,e){// Mark Miller proposes that post with no name should apply a
// promised function.
// Mark Miller proposes that post with no name should apply a
// promised function.
return null===n||void 0===n?t.apply(void 0,e):t[n].apply(t,e)},apply:function(n,e){return t.apply(n,e)},keys:function(){return nn(t)}},void 0,function(){return{state:"fulfilled",value:t}})}/**
 * Converts thenables to Q promises.
 * @param promise thenable promise
 * @returns a Q promise
 */
function S(t){var n=l();return p.nextTick(function(){try{t.then(n.resolve,n.reject,n.notify)}catch(e){n.reject(e)}}),n.promise}function P(t){return y({isDef:function(){}},function(n,e){return U(t,n,e)},function(){return p(t).inspect()})}function N(t,n,e){return p(t).spread(n,e)}function D(t){return function(){// when verb is "send", arg is a value
// when verb is "throw", arg is an exception
function n(t,n){var u;// Until V8 3.19 / Chromium 29 is released, SpiderMonkey is the only
// engine that has a deployed base of browsers that support generators.
// However, SM's generators use the Python-inspired semantics of
// outdated ES6 drafts.  We would like to support ES6, but we'd also
// like to make it possible to use generators in deployed browsers, so
// we also support Python-style generators.  At some point we can remove
// this block.
if("undefined"==typeof StopIteration){// ES6 Generators
try{u=e[t](n)}catch(c){return E(c)}return u.done?p(u.value):v(u.value,o,i)}// SpiderMonkey Generators
// FIXME: Remove this case when SM does ES6 generators.
try{u=e[t](n)}catch(c){return r(c)?p(c.value):E(c)}return v(u,o,i)}var e=t.apply(this,arguments),o=n.bind(n,"next"),i=n.bind(n,"throw");return o()}}function I(t){p.done(p.async(t)())}function A(t){throw new X(t)}function C(t){return function(){return N([this,q(arguments)],function(n,e){return t.apply(n,e)})}}function U(t,n,e){return p(t).dispatch(n,e)}function q(t){return v(t,function(t){var n=0,e=l();return K(t,function(r,o,i){var u;g(o)&&"fulfilled"===(u=o.inspect()).state?t[i]=u.value:(++n,v(o,function(r){t[i]=r,0===--n&&e.resolve(t)},e.reject,function(t){e.notify({index:i,value:t})}))},void 0),0===n&&e.resolve(t),e.promise})}function M(t){return v(t,function(t){return t=Y(t,p),v(q(Y(t,function(t){return v(t,_,_)})),function(){return t})})}function L(t){return p(t).allSettled()}function F(t,n){return p(t).then(void 0,void 0,n)}function Q(t,n){return p(t).nodeify(n)}var B=!1;try{throw new Error}catch($){B=!!$.stack}// All code after this point will be filtered from stack traces reported
// by Q.
var V,X,G=s(),_=function(){},z=function(){function n(){/* jshint loopfunc: true */
for(;e.next;){e=e.next;var t=e.task;e.task=void 0;var r=e.domain;r&&(e.domain=void 0,r.enter());try{t()}catch(i){if(u)// In node, uncaught exceptions are considered fatal errors.
// Re-throw them synchronously to interrupt flushing!
// Ensure continuation if the uncaught exception is suppressed
// listening "uncaughtException" events (as domains does).
// Continue in next event to avoid tick recursion.
throw r&&r.exit(),setTimeout(n,0),r&&r.enter(),i;// In browsers, uncaught exceptions are not fatal.
// Re-throw them asynchronously to avoid slow-downs.
setTimeout(function(){throw i},0)}r&&r.exit()}o=!1}// linked list of tasks (single, with head node)
var e={task:void 0,next:null},r=e,o=!1,i=void 0,u=!1;if(z=function(n){r=r.next={task:n,domain:u&&t.domain,next:null},o||(o=!0,i())},"undefined"!=typeof t&&t.nextTick)// Node.js before 0.9. Note that some fake-Node environments, like the
// Mocha test runner, introduce a `process` global without a `nextTick`.
u=!0,i=function(){t.nextTick(n)};else if("function"==typeof setImmediate)// In IE10, Node.js 0.9+, or https://github.com/NobleJS/setImmediate
i="undefined"!=typeof window?setImmediate.bind(window,n):function(){setImmediate(n)};else if("undefined"!=typeof MessageChannel){// modern browsers
// http://www.nonblocking.io/2011/06/windownexttick.html
var c=new MessageChannel;// At least Safari Version 6.0.5 (8536.30.1) intermittently cannot create
// working message ports the first time a page loads.
c.port1.onmessage=function(){i=f,c.port1.onmessage=n,n()};var f=function(){// Opera requires us to provide a message payload, regardless of
// whether we use it.
c.port2.postMessage(0)};i=function(){setTimeout(n,0),f()}}else// old browsers
i=function(){setTimeout(n,0)};return z}(),H=Function.call,J=n(Array.prototype.slice),K=n(Array.prototype.reduce||function(t,n){var e=0,r=this.length;// concerning the initial value, if one is not provided
if(1===arguments.length)// seek to the first value in the array, accounting
// for the possibility that is is a sparse array
for(;;){if(e in this){n=this[e++];break}if(++e>=r)throw new TypeError}// reduce
for(;r>e;e++)// account for the possibility that the array is sparse
e in this&&(n=t(n,this[e],e));return n}),W=n(Array.prototype.indexOf||function(t){// not a very good shim, but good enough for our one use of it
for(var n=0;n<this.length;n++)if(this[n]===t)return n;return-1}),Y=n(Array.prototype.map||function(t,n){var e=this,r=[];return K(e,function(o,i,u){r.push(t.call(n,i,u,e))},void 0),r}),Z=Object.create||function(t){function n(){}return n.prototype=t,new n},tn=n(Object.prototype.hasOwnProperty),nn=Object.keys||function(t){var n=[];for(var e in t)tn(t,e)&&n.push(e);return n},en=n(Object.prototype.toString);X="undefined"!=typeof ReturnValue?ReturnValue:function(t){this.value=t};// long stack traces
var rn="From previous event:";p.resolve=p,/**
 * Performs a task in a future turn of the event loop.
 * @param {Function} task
 */
p.nextTick=z,/**
 * Controls whether or not long stack traces will be on
 */
p.longStackSupport=!1,// enable long stacks if Q_DEBUG is set
"object"==typeof t&&t&&t.env&&t.env.Q_DEBUG&&(p.longStackSupport=!0),/**
 * Constructs a {promise, resolve, reject} object.
 *
 * `resolve` is a callback to invoke with a more resolved value for the
 * promise. To fulfill the promise, invoke `resolve` with any value that is
 * not a thenable. To reject the promise, invoke `resolve` with a rejected
 * thenable, or invoke `reject` with the reason directly. To resolve the
 * promise to another thenable, thus putting it in the same state, invoke
 * `resolve` with that other thenable.
 */
p.defer=l,/**
 * Creates a Node-style callback that will resolve or reject the deferred
 * promise.
 * @returns a nodeback
 */
l.prototype.makeNodeResolver=function(){var t=this;return function(n,e){n?t.reject(n):t.resolve(arguments.length>2?J(arguments,1):e)}},/**
 * @param resolver {Function} a function that returns nothing and accepts
 * the resolve, reject, and notify functions for a deferred.
 * @returns a promise that may be resolved with the given resolve and reject
 * functions, or rejected by a thrown exception in resolver
 */
p.Promise=d,// ES6
p.promise=d,d.race=h,// ES6
d.all=q,// ES6
d.reject=E,// ES6
d.resolve=p,// ES6
// XXX experimental.  This method is a way to denote that a local value is
// serializable and should be immediately dispatched to a remote upon request,
// instead of passing a reference.
p.passByCopy=function(t){//freeze(object);
//passByCopies.set(object, true);
return t},y.prototype.passByCopy=function(){//freeze(object);
//passByCopies.set(object, true);
return this},/**
 * If two promises eventually fulfill to the same value, promises that value,
 * but otherwise rejects.
 * @param x {Any*}
 * @param y {Any*}
 * @returns {Any*} a promise for x and y if they are the same, but a rejection
 * otherwise.
 *
 */
p.join=function(t,n){return p(t).join(n)},y.prototype.join=function(t){return p([this,t]).spread(function(t,n){if(t===n)// TODO: "===" should be Object.is or equiv
return t;throw new Error("Can't join: not the same: "+t+" "+n)})},/**
 * Returns a promise for the first of an array of promises to become settled.
 * @param answers {Array[Any*]} promises to race
 * @returns {Any*} the first promise to be settled
 */
p.race=h,y.prototype.race=function(){return this.then(p.race)},/**
 * Constructs a Promise with a promise descriptor object and optional fallback
 * function.  The descriptor contains methods like when(rejected), get(name),
 * set(name, value), post(name, args), and delete(name), which all
 * return either a value, a promise for a value, or a rejection.  The fallback
 * accepts the operation name, a resolver, and any further arguments that would
 * have been forwarded to the appropriate method above had a method been
 * provided with the proper name.  The API makes no guarantees about the nature
 * of the returned object, apart from that it is usable whereever promises are
 * bought and sold.
 */
p.makePromise=y,y.prototype.toString=function(){return"[object Promise]"},y.prototype.then=function(t,n,e){// ensure the untrusted promise makes at most a
// single call to one of the callbacks
function r(n){try{return"function"==typeof t?t(n):n}catch(e){return E(e)}}function i(t){if("function"==typeof n){o(t,c);try{return n(t)}catch(e){return E(e)}}return E(t)}function u(t){return"function"==typeof e?e(t):t}var c=this,f=l(),s=!1;// Progress propagator need to be attached in the current tick.
return p.nextTick(function(){c.promiseDispatch(function(t){s||(s=!0,f.resolve(r(t)))},"when",[function(t){s||(s=!0,f.resolve(i(t)))}])}),c.promiseDispatch(void 0,"when",[void 0,function(t){var n,e=!1;try{n=u(t)}catch(r){if(e=!0,!p.onerror)throw r;p.onerror(r)}e||f.notify(n)}]),f.promise},p.tap=function(t,n){return p(t).tap(n)},/**
 * Works almost like "finally", but not called for rejections.
 * Original resolution value is passed through callback unaffected.
 * Callback may return a promise that will be awaited for.
 * @param {Function} callback
 * @returns {Q.Promise}
 * @example
 * doSomething()
 *   .then(...)
 *   .tap(console.log)
 *   .then(...);
 */
y.prototype.tap=function(t){return t=p(t),this.then(function(n){return t.fcall(n).thenResolve(n)})},/**
 * Registers an observer on a promise.
 *
 * Guarantees:
 *
 * 1. that fulfilled and rejected will be called only once.
 * 2. that either the fulfilled callback or the rejected callback will be
 *    called, but not both.
 * 3. that fulfilled and rejected will not be called in this turn.
 *
 * @param value      promise or immediate reference to observe
 * @param fulfilled  function to be called with the fulfilled value
 * @param rejected   function to be called with the rejection exception
 * @param progressed function to be called on any progress notifications
 * @return promise for the return value from the invoked callback
 */
p.when=v,y.prototype.thenResolve=function(t){return this.then(function(){return t})},p.thenResolve=function(t,n){return p(t).thenResolve(n)},y.prototype.thenReject=function(t){return this.then(function(){throw t})},p.thenReject=function(t,n){return p(t).thenReject(n)},/**
 * If an object is not a promise, it is as "near" as possible.
 * If a promise is rejected, it is as "near" as possible too.
 * If it’s a fulfilled promise, the fulfillment value is nearer.
 * If it’s a deferred promise and the deferred has been resolved, the
 * resolution is "nearer".
 * @param object
 * @returns most resolved (nearest) form of the object
 */
// XXX should we re-do this?
p.nearer=m,/**
 * @returns whether the given object is a promise.
 * Otherwise it is a fulfilled value.
 */
p.isPromise=g,p.isPromiseAlike=w,/**
 * @returns whether the given object is a pending promise, meaning not
 * fulfilled or rejected.
 */
p.isPending=k,y.prototype.isPending=function(){return"pending"===this.inspect().state},/**
 * @returns whether the given object is a value or fulfilled
 * promise.
 */
p.isFulfilled=j,y.prototype.isFulfilled=function(){return"fulfilled"===this.inspect().state},/**
 * @returns whether the given object is a rejected promise.
 */
p.isRejected=b,y.prototype.isRejected=function(){return"rejected"===this.inspect().state};//// BEGIN UNHANDLED REJECTION TRACKING
// This promise library consumes exceptions thrown in handlers so they can be
// handled by a subsequent promise.  The exceptions get added to this array when
// they are created, and removed when they are handled.  Note that in ES6 or
// shimmed environments, this would naturally be a `Set`.
var on=[],un=[],cn=!0;p.resetUnhandledRejections=x,p.getUnhandledReasons=function(){// Make a copy so that consumers can't interfere with our internal state.
return on.slice()},p.stopUnhandledRejectionTracking=function(){x(),cn=!1},x(),//// END UNHANDLED REJECTION TRACKING
/**
 * Constructs a rejected promise.
 * @param reason value describing the failure
 */
p.reject=E,/**
 * Constructs a fulfilled promise for an immediate reference.
 * @param value immediate reference
 */
p.fulfill=O,/**
 * Annotates an object such that it will never be
 * transferred away from this process over any promise
 * communication channel.
 * @param object
 * @returns promise a wrapping of that object that
 * additionally responds to the "isDef" message
 * without a rejection.
 */
p.master=P,/**
 * Spreads the values of a promised array of arguments into the
 * fulfillment callback.
 * @param fulfilled callback that receives variadic arguments from the
 * promised array
 * @param rejected callback that receives the exception if the promise
 * is rejected.
 * @returns a promise for the return value or thrown exception of
 * either callback.
 */
p.spread=N,y.prototype.spread=function(t,n){return this.all().then(function(n){return t.apply(void 0,n)},n)},/**
 * The async function is a decorator for generator functions, turning
 * them into asynchronous generators.  Although generators are only part
 * of the newest ECMAScript 6 drafts, this code does not cause syntax
 * errors in older engines.  This code should continue to work and will
 * in fact improve over time as the language improves.
 *
 * ES6 generators are currently part of V8 version 3.19 with the
 * --harmony-generators runtime flag enabled.  SpiderMonkey has had them
 * for longer, but under an older Python-inspired form.  This function
 * works on both kinds of generators.
 *
 * Decorates a generator function such that:
 *  - it may yield promises
 *  - execution will continue when that promise is fulfilled
 *  - the value of the yield expression will be the fulfilled value
 *  - it returns a promise for the return value (when the generator
 *    stops iterating)
 *  - the decorated function returns a promise for the return value
 *    of the generator or the first rejected promise among those
 *    yielded.
 *  - if an error is thrown in the generator, it propagates through
 *    every following yield until it is caught, or until it escapes
 *    the generator function altogether, and is translated into a
 *    rejection for the promise returned by the decorated generator.
 */
p.async=D,/**
 * The spawn function is a small wrapper around async that immediately
 * calls the generator and also ends the promise chain, so that any
 * unhandled errors are thrown instead of forwarded to the error
 * handler. This is useful because it's extremely common to run
 * generators at the top-level to work with libraries.
 */
p.spawn=I,// FIXME: Remove this interface once ES6 generators are in SpiderMonkey.
/**
 * Throws a ReturnValue exception to stop an asynchronous generator.
 *
 * This interface is a stop-gap measure to support generator return
 * values in older Firefox/SpiderMonkey.  In browsers that support ES6
 * generators like Chromium 29, just use "return" in your generator
 * functions.
 *
 * @param value the return value for the surrounding generator
 * @throws ReturnValue exception with the value.
 * @example
 * // ES6 style
 * Q.async(function* () {
 *      var foo = yield getFooPromise();
 *      var bar = yield getBarPromise();
 *      return foo + bar;
 * })
 * // Older SpiderMonkey style
 * Q.async(function () {
 *      var foo = yield getFooPromise();
 *      var bar = yield getBarPromise();
 *      Q.return(foo + bar);
 * })
 */
p["return"]=A,/**
 * The promised function decorator ensures that any promise arguments
 * are settled and passed as values (`this` is also settled and passed
 * as a value).  It will also ensure that the result of a function is
 * always a promise.
 *
 * @example
 * var add = Q.promised(function (a, b) {
 *     return a + b;
 * });
 * add(Q(a), Q(B));
 *
 * @param {function} callback The function to decorate
 * @returns {function} a function that has been decorated.
 */
p.promised=C,/**
 * sends a message to a value in a future turn
 * @param object* the recipient
 * @param op the name of the message operation, e.g., "when",
 * @param args further arguments to be forwarded to the operation
 * @returns result {Promise} a promise for the result of the operation
 */
p.dispatch=U,y.prototype.dispatch=function(t,n){var e=this,r=l();return p.nextTick(function(){e.promiseDispatch(r.resolve,t,n)}),r.promise},/**
 * Gets the value of a property in a future turn.
 * @param object    promise or immediate reference for target object
 * @param name      name of property to get
 * @return promise for the property value
 */
p.get=function(t,n){return p(t).dispatch("get",[n])},y.prototype.get=function(t){return this.dispatch("get",[t])},/**
 * Sets the value of a property in a future turn.
 * @param object    promise or immediate reference for object object
 * @param name      name of property to set
 * @param value     new value of property
 * @return promise for the return value
 */
p.set=function(t,n,e){return p(t).dispatch("set",[n,e])},y.prototype.set=function(t,n){return this.dispatch("set",[t,n])},/**
 * Deletes a property in a future turn.
 * @param object    promise or immediate reference for target object
 * @param name      name of property to delete
 * @return promise for the return value
 */
p.del=// XXX legacy
p["delete"]=function(t,n){return p(t).dispatch("delete",[n])},y.prototype.del=// XXX legacy
y.prototype["delete"]=function(t){return this.dispatch("delete",[t])},/**
 * Invokes a method in a future turn.
 * @param object    promise or immediate reference for target object
 * @param name      name of method to invoke
 * @param value     a value to post, typically an array of
 *                  invocation arguments for promises that
 *                  are ultimately backed with `resolve` values,
 *                  as opposed to those backed with URLs
 *                  wherein the posted value can be any
 *                  JSON serializable object.
 * @return promise for the return value
 */
// bound locally because it is used by other methods
p.mapply=// XXX As proposed by "Redsandro"
p.post=function(t,n,e){return p(t).dispatch("post",[n,e])},y.prototype.mapply=// XXX As proposed by "Redsandro"
y.prototype.post=function(t,n){return this.dispatch("post",[t,n])},/**
 * Invokes a method in a future turn.
 * @param object    promise or immediate reference for target object
 * @param name      name of method to invoke
 * @param ...args   array of invocation arguments
 * @return promise for the return value
 */
p.send=// XXX Mark Miller's proposed parlance
p.mcall=// XXX As proposed by "Redsandro"
p.invoke=function(t,n){return p(t).dispatch("post",[n,J(arguments,2)])},y.prototype.send=// XXX Mark Miller's proposed parlance
y.prototype.mcall=// XXX As proposed by "Redsandro"
y.prototype.invoke=function(t){return this.dispatch("post",[t,J(arguments,1)])},/**
 * Applies the promised function in a future turn.
 * @param object    promise or immediate reference for target function
 * @param args      array of application arguments
 */
p.fapply=function(t,n){return p(t).dispatch("apply",[void 0,n])},y.prototype.fapply=function(t){return this.dispatch("apply",[void 0,t])},/**
 * Calls the promised function in a future turn.
 * @param object    promise or immediate reference for target function
 * @param ...args   array of application arguments
 */
p["try"]=p.fcall=function(t){return p(t).dispatch("apply",[void 0,J(arguments,1)])},y.prototype.fcall=function(){return this.dispatch("apply",[void 0,J(arguments)])},/**
 * Binds the promised function, transforming return values into a fulfilled
 * promise and thrown errors into a rejected one.
 * @param object    promise or immediate reference for target function
 * @param ...args   array of application arguments
 */
p.fbind=function(t){var n=p(t),e=J(arguments,1);return function(){return n.dispatch("apply",[this,e.concat(J(arguments))])}},y.prototype.fbind=function(){var t=this,n=J(arguments);return function(){return t.dispatch("apply",[this,n.concat(J(arguments))])}},/**
 * Requests the names of the owned properties of a promised
 * object in a future turn.
 * @param object    promise or immediate reference for target object
 * @return promise for the keys of the eventually settled object
 */
p.keys=function(t){return p(t).dispatch("keys",[])},y.prototype.keys=function(){return this.dispatch("keys",[])},/**
 * Turns an array of promises into a promise for an array.  If any of
 * the promises gets rejected, the whole array is rejected immediately.
 * @param {Array*} an array (or promise for an array) of values (or
 * promises for values)
 * @returns a promise for an array of the corresponding values
 */
// By Mark Miller
// http://wiki.ecmascript.org/doku.php?id=strawman:concurrency&rev=1308776521#allfulfilled
p.all=q,y.prototype.all=function(){return q(this)},/**
 * Waits for all promises to be settled, either fulfilled or
 * rejected.  This is distinct from `all` since that would stop
 * waiting at the first rejection.  The promise returned by
 * `allResolved` will never be rejected.
 * @param promises a promise for an array (or an array) of promises
 * (or values)
 * @return a promise for an array of promises
 */
p.allResolved=a(M,"allResolved","allSettled"),y.prototype.allResolved=function(){return M(this)},/**
 * @see Promise#allSettled
 */
p.allSettled=L,/**
 * Turns an array of promises into a promise for an array of their states (as
 * returned by `inspect`) when they have all settled.
 * @param {Array[Any*]} values an array (or promise for an array) of values (or
 * promises for values)
 * @returns {Array[State]} an array of states for the respective values.
 */
y.prototype.allSettled=function(){return this.then(function(t){return q(Y(t,function(t){function n(){return t.inspect()}return t=p(t),t.then(n,n)}))})},/**
 * Captures the failure of a promise, giving an oportunity to recover
 * with a callback.  If the given promise is fulfilled, the returned
 * promise is fulfilled.
 * @param {Any*} promise for something
 * @param {Function} callback to fulfill the returned promise if the
 * given promise is rejected
 * @returns a promise for the return value of the callback
 */
p.fail=// XXX legacy
p["catch"]=function(t,n){return p(t).then(void 0,n)},y.prototype.fail=// XXX legacy
y.prototype["catch"]=function(t){return this.then(void 0,t)},/**
 * Attaches a listener that can respond to progress notifications from a
 * promise's originating deferred. This listener receives the exact arguments
 * passed to ``deferred.notify``.
 * @param {Any*} promise for something
 * @param {Function} callback to receive any progress notifications
 * @returns the given promise, unchanged
 */
p.progress=F,y.prototype.progress=function(t){return this.then(void 0,void 0,t)},/**
 * Provides an opportunity to observe the settling of a promise,
 * regardless of whether the promise is fulfilled or rejected.  Forwards
 * the resolution to the returned promise when the callback is done.
 * The callback can return a promise to defer completion.
 * @param {Any*} promise
 * @param {Function} callback to observe the resolution of the given
 * promise, takes no arguments.
 * @returns a promise for the resolution of the given promise when
 * ``fin`` is done.
 */
p.fin=// XXX legacy
p["finally"]=function(t,n){return p(t)["finally"](n)},y.prototype.fin=// XXX legacy
y.prototype["finally"]=function(t){return t=p(t),this.then(function(n){return t.fcall().then(function(){return n})},function(n){// TODO attempt to recycle the rejection with "this".
return t.fcall().then(function(){throw n})})},/**
 * Terminates a chain of promises, forcing rejections to be
 * thrown as exceptions.
 * @param {Any*} promise at the end of a chain of promises
 * @returns nothing
 */
p.done=function(t,n,e,r){return p(t).done(n,e,r)},y.prototype.done=function(n,e,r){var i=function(t){// forward to a future turn so that ``when``
// does not catch it and turn it into a rejection.
p.nextTick(function(){if(o(t,u),!p.onerror)throw t;p.onerror(t)})},u=n||e||r?this.then(n,e,r):this;"object"==typeof t&&t&&t.domain&&(i=t.domain.bind(i)),u.then(void 0,i)},/**
 * Causes a promise to be rejected if it does not get fulfilled before
 * some milliseconds time out.
 * @param {Any*} promise
 * @param {Number} milliseconds timeout
 * @param {Any*} custom error message or Error object (optional)
 * @returns a promise for the resolution of the given promise if it is
 * fulfilled before the timeout, otherwise rejected.
 */
p.timeout=function(t,n,e){return p(t).timeout(n,e)},y.prototype.timeout=function(t,n){var e=l(),r=setTimeout(function(){n&&"string"!=typeof n||(n=new Error(n||"Timed out after "+t+" ms"),n.code="ETIMEDOUT"),e.reject(n)},t);return this.then(function(t){clearTimeout(r),e.resolve(t)},function(t){clearTimeout(r),e.reject(t)},e.notify),e.promise},/**
 * Returns a promise for the given value (or promised value), some
 * milliseconds after it resolved. Passes rejections immediately.
 * @param {Any*} promise
 * @param {Number} milliseconds
 * @returns a promise for the resolution of the given promise after milliseconds
 * time has elapsed since the resolution of the given promise.
 * If the given promise rejects, that is passed immediately.
 */
p.delay=function(t,n){return void 0===n&&(n=t,t=void 0),p(t).delay(n)},y.prototype.delay=function(t){return this.then(function(n){var e=l();return setTimeout(function(){e.resolve(n)},t),e.promise})},/**
 * Passes a continuation to a Node function, which is called with the given
 * arguments provided as an array, and returns a promise.
 *
 *      Q.nfapply(FS.readFile, [__filename])
 *      .then(function (content) {
 *      })
 *
 */
p.nfapply=function(t,n){return p(t).nfapply(n)},y.prototype.nfapply=function(t){var n=l(),e=J(t);return e.push(n.makeNodeResolver()),this.fapply(e).fail(n.reject),n.promise},/**
 * Passes a continuation to a Node function, which is called with the given
 * arguments provided individually, and returns a promise.
 * @example
 * Q.nfcall(FS.readFile, __filename)
 * .then(function (content) {
 * })
 *
 */
p.nfcall=function(t){var n=J(arguments,1);return p(t).nfapply(n)},y.prototype.nfcall=function(){var t=J(arguments),n=l();return t.push(n.makeNodeResolver()),this.fapply(t).fail(n.reject),n.promise},/**
 * Wraps a NodeJS continuation passing function and returns an equivalent
 * version that returns a promise.
 * @example
 * Q.nfbind(FS.readFile, __filename)("utf-8")
 * .then(console.log)
 * .done()
 */
p.nfbind=p.denodeify=function(t){var n=J(arguments,1);return function(){var e=n.concat(J(arguments)),r=l();return e.push(r.makeNodeResolver()),p(t).fapply(e).fail(r.reject),r.promise}},y.prototype.nfbind=y.prototype.denodeify=function(){var t=J(arguments);return t.unshift(this),p.denodeify.apply(void 0,t)},p.nbind=function(t,n){var e=J(arguments,2);return function(){function r(){return t.apply(n,arguments)}var o=e.concat(J(arguments)),i=l();return o.push(i.makeNodeResolver()),p(r).fapply(o).fail(i.reject),i.promise}},y.prototype.nbind=function(){var t=J(arguments,0);return t.unshift(this),p.nbind.apply(void 0,t)},/**
 * Calls a method of a Node-style object that accepts a Node-style
 * callback with a given array of arguments, plus a provided callback.
 * @param object an object that has the named method
 * @param {String} name name of the method of object
 * @param {Array} args arguments to pass to the method; the callback
 * will be provided by Q and appended to these arguments.
 * @returns a promise for the value or error
 */
p.nmapply=// XXX As proposed by "Redsandro"
p.npost=function(t,n,e){return p(t).npost(n,e)},y.prototype.nmapply=// XXX As proposed by "Redsandro"
y.prototype.npost=function(t,n){var e=J(n||[]),r=l();return e.push(r.makeNodeResolver()),this.dispatch("post",[t,e]).fail(r.reject),r.promise},/**
 * Calls a method of a Node-style object that accepts a Node-style
 * callback, forwarding the given variadic arguments, plus a provided
 * callback argument.
 * @param object an object that has the named method
 * @param {String} name name of the method of object
 * @param ...args arguments to pass to the method; the callback will
 * be provided by Q and appended to these arguments.
 * @returns a promise for the value or error
 */
p.nsend=// XXX Based on Mark Miller's proposed "send"
p.nmcall=// XXX Based on "Redsandro's" proposal
p.ninvoke=function(t,n){var e=J(arguments,2),r=l();return e.push(r.makeNodeResolver()),p(t).dispatch("post",[n,e]).fail(r.reject),r.promise},y.prototype.nsend=// XXX Based on Mark Miller's proposed "send"
y.prototype.nmcall=// XXX Based on "Redsandro's" proposal
y.prototype.ninvoke=function(t){var n=J(arguments,1),e=l();return n.push(e.makeNodeResolver()),this.dispatch("post",[t,n]).fail(e.reject),e.promise},/**
 * If a function would like to support both Node continuation-passing-style and
 * promise-returning-style, it can end its internal promise chain with
 * `nodeify(nodeback)`, forwarding the optional nodeback argument.  If the user
 * elects to use a nodeback, the result will be sent there.  If they do not
 * pass a nodeback, they will receive the result promise.
 * @param object a result (or a promise for a result)
 * @param {Function} nodeback a Node.js-style callback
 * @returns either the promise or nothing
 */
p.nodeify=Q,y.prototype.nodeify=function(t){return t?void this.then(function(n){p.nextTick(function(){t(null,n)})},function(n){p.nextTick(function(){t(n)})}):this};// All code before this point will be filtered from stack traces.
var fn=s();return p})}).call(this,t("IrXUsu"))},{IrXUsu:2}]},{},[1]);